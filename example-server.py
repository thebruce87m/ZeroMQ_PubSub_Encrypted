import zmq
import random
import sys
import time as tm
import json
import os
import datetime as dt
import zmq.auth
from zmq.auth.thread import ThreadAuthenticator
import logging


# These directories are generated by the generate_certificates script
base_dir = os.path.dirname(__file__)
keys_dir = os.path.join(base_dir, 'certificates')
public_keys_dir = os.path.join(base_dir, 'public_keys')
secret_keys_dir = os.path.join(base_dir, 'private_keys')

if not (
        os.path.exists(keys_dir)
        and os.path.exists(public_keys_dir)
        and os.path.exists(secret_keys_dir)
    ):
        logging.critical(
            "Certificates are missing - run generate_certificates.py script first"
        )
        sys.exit(1)

ctx = zmq.Context.instance()

# Start an authenticator for this context.
auth = ThreadAuthenticator(ctx)
auth.start()
auth.allow('127.0.0.1')
# Tell authenticator to use the certificate in a directory
auth.configure_curve(domain='*', location=public_keys_dir)

server = ctx.socket(zmq.PUB)

server_secret_file = os.path.join(secret_keys_dir, "server.key_secret")
server_public, server_secret = zmq.auth.load_certificate(server_secret_file)
server.curve_secretkey = server_secret
server.curve_publickey = server_public
server.curve_server = True  # must come before bind
server.bind('tcp://*:1234')


while True:
    
    print("Sending...")
    #
    # Time string
    #
    time = dt.datetime.now(dt.timezone.utc)
    time_string = time.strftime("%Y%m%d_%H%M%S")

    #
    # Trigger Message
    #
    message = {
        "message_type": "trigger",
        "time": time_string
    }

    message = json.dumps(message, indent=4, sort_keys=True, default=str)
    server.send_string(message)


    #
    # Simulate Delay
    #
    tm.sleep(1)